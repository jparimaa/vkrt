#version 460
#extension GL_EXT_ray_tracing : require

layout(location = 0) rayPayloadEXT Payload
{
    vec3 hitValue;
    int done;
    int depth;
    float attenuation;
    vec3 rayOrigin;
    vec3 rayDir;
}
payload;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0) uniform CommonUniformBuffer
{
    mat4 viewInverse;
    mat4 projInverse;
    vec4 position;
    vec4 right;
    vec4 up;
    vec4 forward;
    vec4 lightPositions[4];
}
commonBuffer;

layout(binding = 4, set = 0, rgba32f) uniform image2D image;

void main()
{
    return;
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    const vec2 uvNorm = inUV * 2.0 - 1.0;

    const vec4 target = commonBuffer.projInverse * vec4(uvNorm.x, uvNorm.y, 1, 1);
    vec4 direction = commonBuffer.viewInverse * vec4(normalize(target.xyz), 0);
    vec4 origin = commonBuffer.viewInverse * vec4(0, 0, 0, 1);

    const int maxDepth = 2;

    vec3 finalHitValue = vec3(0);

    payload.hitValue = vec3(0);
    payload.attenuation = 1;
    payload.depth = 0;
    payload.done = 1;

    for (;;)
    {
        traceRayEXT(topLevelAS, // acceleration structure
                    gl_RayFlagsOpaqueEXT, // rayFlags
                    0xFF, // cullMask
                    0, // sbtRecordOffset
                    0, // sbtRecordStride
                    0, // missIndex
                    origin.xyz, // ray origin
                    0.001, // ray min range
                    direction.xyz, // ray direction
                    1000.0, // ray max range
                    0 // payload (location = 0)
        );
        finalHitValue += payload.hitValue;

        ++payload.depth;
        if (payload.done == 1 || payload.depth >= maxDepth)
        {
            break;
        }

        origin.xyz = payload.rayOrigin;
        direction.xyz = payload.rayDir;
        payload.done = 1; // Stop by default, will be changed if hit on reflective material
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalHitValue, 1.0));
}
